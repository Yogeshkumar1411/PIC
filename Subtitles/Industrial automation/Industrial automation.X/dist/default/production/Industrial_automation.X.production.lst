

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Mon Jul 04 07:35:56 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.40
    24                           ; Generated 17/11/2021 GMT
    25                           ; 
    26                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution. Publication is not required when
    40                           ;        this file is used in an embedded application.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC16F887 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     	;# 
    59  0001                     	;# 
    60  0002                     	;# 
    61  0003                     	;# 
    62  0004                     	;# 
    63  0005                     	;# 
    64  0006                     	;# 
    65  0007                     	;# 
    66  0008                     	;# 
    67  0009                     	;# 
    68  000A                     	;# 
    69  000B                     	;# 
    70  000C                     	;# 
    71  000D                     	;# 
    72  000E                     	;# 
    73  000E                     	;# 
    74  000F                     	;# 
    75  0010                     	;# 
    76  0011                     	;# 
    77  0012                     	;# 
    78  0013                     	;# 
    79  0014                     	;# 
    80  0015                     	;# 
    81  0015                     	;# 
    82  0016                     	;# 
    83  0017                     	;# 
    84  0018                     	;# 
    85  0019                     	;# 
    86  001A                     	;# 
    87  001B                     	;# 
    88  001B                     	;# 
    89  001C                     	;# 
    90  001D                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  0081                     	;# 
    94  0085                     	;# 
    95  0086                     	;# 
    96  0087                     	;# 
    97  0088                     	;# 
    98  0089                     	;# 
    99  008C                     	;# 
   100  008D                     	;# 
   101  008E                     	;# 
   102  008F                     	;# 
   103  0090                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0093                     	;# 
   107  0093                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  009F                     	;# 
   121  0105                     	;# 
   122  0107                     	;# 
   123  0108                     	;# 
   124  0109                     	;# 
   125  010C                     	;# 
   126  010C                     	;# 
   127  010D                     	;# 
   128  010E                     	;# 
   129  010F                     	;# 
   130  0185                     	;# 
   131  0187                     	;# 
   132  0188                     	;# 
   133  0189                     	;# 
   134  018C                     	;# 
   135  018D                     	;# 
   136  0000                     	;# 
   137  0001                     	;# 
   138  0002                     	;# 
   139  0003                     	;# 
   140  0004                     	;# 
   141  0005                     	;# 
   142  0006                     	;# 
   143  0007                     	;# 
   144  0008                     	;# 
   145  0009                     	;# 
   146  000A                     	;# 
   147  000B                     	;# 
   148  000C                     	;# 
   149  000D                     	;# 
   150  000E                     	;# 
   151  000E                     	;# 
   152  000F                     	;# 
   153  0010                     	;# 
   154  0011                     	;# 
   155  0012                     	;# 
   156  0013                     	;# 
   157  0014                     	;# 
   158  0015                     	;# 
   159  0015                     	;# 
   160  0016                     	;# 
   161  0017                     	;# 
   162  0018                     	;# 
   163  0019                     	;# 
   164  001A                     	;# 
   165  001B                     	;# 
   166  001B                     	;# 
   167  001C                     	;# 
   168  001D                     	;# 
   169  001E                     	;# 
   170  001F                     	;# 
   171  0081                     	;# 
   172  0085                     	;# 
   173  0086                     	;# 
   174  0087                     	;# 
   175  0088                     	;# 
   176  0089                     	;# 
   177  008C                     	;# 
   178  008D                     	;# 
   179  008E                     	;# 
   180  008F                     	;# 
   181  0090                     	;# 
   182  0091                     	;# 
   183  0092                     	;# 
   184  0093                     	;# 
   185  0093                     	;# 
   186  0093                     	;# 
   187  0094                     	;# 
   188  0095                     	;# 
   189  0096                     	;# 
   190  0097                     	;# 
   191  0098                     	;# 
   192  0099                     	;# 
   193  009A                     	;# 
   194  009B                     	;# 
   195  009C                     	;# 
   196  009D                     	;# 
   197  009E                     	;# 
   198  009F                     	;# 
   199  0105                     	;# 
   200  0107                     	;# 
   201  0108                     	;# 
   202  0109                     	;# 
   203  010C                     	;# 
   204  010C                     	;# 
   205  010D                     	;# 
   206  010E                     	;# 
   207  010F                     	;# 
   208  0185                     	;# 
   209  0187                     	;# 
   210  0188                     	;# 
   211  0189                     	;# 
   212  018C                     	;# 
   213  018D                     	;# 
   214  0014                     _SSPCON	set	20
   215  0009                     _PORTE	set	9
   216  0005                     _PORTA	set	5
   217  0007                     _PORTC	set	7
   218  0013                     _SSPBUF	set	19
   219  0008                     _PORTD	set	8
   220  0029                     _RA1	set	41
   221  003F                     _RC7	set	63
   222  003E                     _RC6	set	62
   223  00A6                     _SSPOV	set	166
   224  0063                     _SSPIF	set	99
   225  004A                     _RE2	set	74
   226  0049                     _RE1	set	73
   227  0048                     _RE0	set	72
   228  0089                     _TRISE	set	137
   229  0088                     _TRISD	set	136
   230  0085                     _TRISA	set	133
   231  0087                     _TRISC	set	135
   232  048B                     _RCEN	set	1163
   233  04A7                     _SMP	set	1191
   234  048C                     _ACKEN	set	1164
   235  04A0                     _BF	set	1184
   236  048D                     _ACKDT	set	1165
   237  0489                     _RSEN	set	1161
   238  048E                     _ACKSTAT	set	1166
   239  048A                     _PEN	set	1162
   240  0488                     _SEN	set	1160
   241  0189                     _ANSELH	set	393
   242  0188                     _ANSEL	set	392
   243                           
   244                           	psect	strings
   245  0003                     __pstrings:
   246  0003                     stringtab:
   247  0003                     __stringtab:
   248  0003                     stringcode:	
   249                           ;	String table - string pointers are 1 byte each
   250                           
   251  0003                     stringdir:
   252  0003  3000               	movlw	high stringdir
   253  0004  008A               	movwf	10
   254  0005  0804               	movf	4,w
   255  0006  0A84               	incf	4,f
   256  0007  0782               	addwf	2,f
   257  0008                     __stringbase:
   258  0008  3400               	retlw	0
   259  0009                     __end_of__stringtab:
   260  0009                     STR_1:
   261  0009  3474               	retlw	116	;'t'
   262  000A  3469               	retlw	105	;'i'
   263  000B  346D               	retlw	109	;'m'
   264  000C  3465               	retlw	101	;'e'
   265  000D  343A               	retlw	58	;':'
   266  000E  3420               	retlw	32	;' '
   267  000F  3400               	retlw	0
   268                           
   269                           	psect	cinit
   270  07FC                     start_initialization:	
   271                           ; #config settings
   272                           
   273  07FC                     __initialization:
   274  07FC                     end_of_initialization:	
   275                           ;End of C runtime variable initialization code
   276                           
   277  07FC                     __end_of__initialization:
   278  07FC  0183               	clrf	3
   279  07FD  120A  118A  2E1D   	ljmp	_main	;jump to C main() function
   280                           
   281                           	psect	cstackCOMMON
   282  0070                     __pcstackCOMMON:
   283  0070                     ?_delay:
   284  0070                     ?_hold:	
   285                           ; 1 bytes @ 0x0
   286                           
   287  0070                     ??_hold:	
   288                           ; 1 bytes @ 0x0
   289                           
   290  0070                     ?_I2C_Start:	
   291                           ; 1 bytes @ 0x0
   292                           
   293  0070                     ??_I2C_Start:	
   294                           ; 1 bytes @ 0x0
   295                           
   296  0070                     ?_I2C_Stop:	
   297                           ; 1 bytes @ 0x0
   298                           
   299  0070                     ??_I2C_Stop:	
   300                           ; 1 bytes @ 0x0
   301                           
   302  0070                     ?_I2C_Slave:	
   303                           ; 1 bytes @ 0x0
   304                           
   305  0070                     ??_I2C_Slave:	
   306                           ; 1 bytes @ 0x0
   307                           
   308  0070                     ?_I2C_Restart:	
   309                           ; 1 bytes @ 0x0
   310                           
   311  0070                     ??_I2C_Restart:	
   312                           ; 1 bytes @ 0x0
   313                           
   314  0070                     ?_I2C_Read:	
   315                           ; 1 bytes @ 0x0
   316                           
   317  0070                     ?_string:	
   318                           ; 1 bytes @ 0x0
   319                           
   320  0070                     ?_conversion:	
   321                           ; 1 bytes @ 0x0
   322                           
   323  0070                     ?_main:	
   324                           ; 1 bytes @ 0x0
   325                           
   326  0070                     I2C_Slave@data:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  0070                     delay@ms:	
   330                           ; 1 bytes @ 0x0
   331                           
   332  0070                     I2C_Read@i:	
   333                           ; 2 bytes @ 0x0
   334                           
   335                           
   336                           ; 2 bytes @ 0x0
   337  0070                     	ds	2
   338  0072                     ??_delay:
   339  0072                     ?_lcd_cmd:	
   340                           ; 1 bytes @ 0x2
   341                           
   342  0072                     ??_I2C_Read:	
   343                           ; 1 bytes @ 0x2
   344                           
   345  0072                     lcd_cmd@a:	
   346                           ; 1 bytes @ 0x2
   347                           
   348                           
   349                           ; 2 bytes @ 0x2
   350  0072                     	ds	1
   351  0073                     I2C_Read@read1:
   352                           
   353                           ; 1 bytes @ 0x3
   354  0073                     	ds	1
   355  0074                     lcd_cmd@b:
   356                           
   357                           ; 2 bytes @ 0x4
   358  0074                     	ds	2
   359  0076                     lcd_cmd@c:
   360                           
   361                           ; 1 bytes @ 0x6
   362  0076                     	ds	1
   363  0077                     ??_lcd_cmd:
   364  0077                     ??_string:	
   365                           ; 1 bytes @ 0x7
   366                           
   367                           
   368                           ; 1 bytes @ 0x7
   369  0077                     	ds	1
   370  0078                     string@p:
   371                           
   372                           ; 1 bytes @ 0x8
   373  0078                     	ds	1
   374  0079                     ??_conversion:
   375                           
   376                           ; 1 bytes @ 0x9
   377  0079                     	ds	2
   378  007B                     conversion@disp:
   379                           
   380                           ; 1 bytes @ 0xB
   381  007B                     	ds	1
   382                           
   383                           	psect	cstackBANK0
   384  0020                     __pcstackBANK0:
   385  0020                     ??_main:
   386                           
   387                           ; 1 bytes @ 0x0
   388  0020                     	ds	3
   389  0023                     main@read:
   390                           
   391                           ; 6 bytes @ 0x3
   392  0023                     	ds	6
   393  0029                     main@i:
   394                           
   395                           ; 1 bytes @ 0x9
   396  0029                     	ds	1
   397                           
   398                           	psect	maintext
   399  061D                     __pmaintext:	
   400 ;;
   401 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   402 ;;
   403 ;; *************** function _main *****************
   404 ;; Defined at:
   405 ;;		line 92 in file "Industrial automation.c"
   406 ;; Parameters:    Size  Location     Type
   407 ;;		None
   408 ;; Auto vars:     Size  Location     Type
   409 ;;  read            6    3[BANK0 ] unsigned char [6]
   410 ;;  i               1    9[BANK0 ] unsigned char 
   411 ;; Return value:  Size  Location     Type
   412 ;;                  1    wreg      void 
   413 ;; Registers used:
   414 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   415 ;; Tracked objects:
   416 ;;		On entry : B00/0
   417 ;;		On exit  : 0/0
   418 ;;		Unchanged: 0/0
   419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   420 ;;      Params:         0       0       0       0       0
   421 ;;      Locals:         0       7       0       0       0
   422 ;;      Temps:          0       3       0       0       0
   423 ;;      Totals:         0      10       0       0       0
   424 ;;Total ram usage:       10 bytes
   425 ;; Hardware stack levels required when called: 4
   426 ;; This function calls:
   427 ;;		_I2C_Read
   428 ;;		_I2C_Restart
   429 ;;		_I2C_Slave
   430 ;;		_I2C_Start
   431 ;;		_I2C_Stop
   432 ;;		_conversion
   433 ;;		_delay
   434 ;;		_lcd_cmd
   435 ;; This function is called by:
   436 ;;		Startup code after reset
   437 ;; This function uses a non-reentrant model
   438 ;;
   439                           
   440  061D                     _main:	
   441                           ;psect for function _main
   442                           
   443  061D                     l946:	
   444                           ;incstack = 0
   445                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   446                           
   447                           
   448                           ;Industrial automation.c: 94:  unsigned char i,read[6];;Industrial automation.c: 95:  TR
      +                          ISC=0X18;
   449  061D  3018               	movlw	24
   450  061E  1683               	bsf	3,5	;RP0=1, select bank1
   451  061F  1303               	bcf	3,6	;RP1=0, select bank1
   452  0620  0087               	movwf	7	;volatile
   453  0621                     l948:
   454                           
   455                           ;Industrial automation.c: 96:  PORTC=0X00;
   456  0621  1283               	bcf	3,5	;RP0=0, select bank0
   457  0622  1303               	bcf	3,6	;RP1=0, select bank0
   458  0623  0187               	clrf	7	;volatile
   459  0624                     l950:
   460                           
   461                           ;Industrial automation.c: 97:     TRISA=0X02;
   462  0624  3002               	movlw	2
   463  0625  1683               	bsf	3,5	;RP0=1, select bank1
   464  0626  1303               	bcf	3,6	;RP1=0, select bank1
   465  0627  0085               	movwf	5	;volatile
   466                           
   467                           ;Industrial automation.c: 98:     PORTA=0X00;
   468  0628  1283               	bcf	3,5	;RP0=0, select bank0
   469  0629  1303               	bcf	3,6	;RP1=0, select bank0
   470  062A  0185               	clrf	5	;volatile
   471                           
   472                           ;Industrial automation.c: 99:  TRISD=0X00;
   473  062B  1683               	bsf	3,5	;RP0=1, select bank1
   474  062C  1303               	bcf	3,6	;RP1=0, select bank1
   475  062D  0188               	clrf	8	;volatile
   476                           
   477                           ;Industrial automation.c: 100:  PORTD=0X00;
   478  062E  1283               	bcf	3,5	;RP0=0, select bank0
   479  062F  1303               	bcf	3,6	;RP1=0, select bank0
   480  0630  0188               	clrf	8	;volatile
   481                           
   482                           ;Industrial automation.c: 101:  TRISE=0X00;
   483  0631  1683               	bsf	3,5	;RP0=1, select bank1
   484  0632  1303               	bcf	3,6	;RP1=0, select bank1
   485  0633  0189               	clrf	9	;volatile
   486                           
   487                           ;Industrial automation.c: 102:  PORTE=0X00;
   488  0634  1283               	bcf	3,5	;RP0=0, select bank0
   489  0635  1303               	bcf	3,6	;RP1=0, select bank0
   490  0636  0189               	clrf	9	;volatile
   491                           
   492                           ;Industrial automation.c: 103:  ANSEL=0X00;
   493  0637  1683               	bsf	3,5	;RP0=1, select bank3
   494  0638  1703               	bsf	3,6	;RP1=1, select bank3
   495  0639  0188               	clrf	8	;volatile
   496                           
   497                           ;Industrial automation.c: 104:  ANSELH=0X00;
   498  063A  0189               	clrf	9	;volatile
   499  063B                     l952:
   500                           
   501                           ;Industrial automation.c: 105:  SMP=1;
   502  063B  1683               	bsf	3,5	;RP0=1, select bank1
   503  063C  1303               	bcf	3,6	;RP1=0, select bank1
   504  063D  1794               	bsf	20,7	;volatile
   505  063E                     l954:
   506                           
   507                           ;Industrial automation.c: 106:  SSPCON=0X28;
   508  063E  3028               	movlw	40
   509  063F  1283               	bcf	3,5	;RP0=0, select bank0
   510  0640  1303               	bcf	3,6	;RP1=0, select bank0
   511  0641  0094               	movwf	20	;volatile
   512  0642                     l956:
   513                           
   514                           ;Industrial automation.c: 108:  lcd_cmd(0,0,0X38);
   515  0642  3000               	movlw	0
   516  0643  00F2               	movwf	lcd_cmd@a
   517  0644  00F3               	movwf	lcd_cmd@a+1
   518  0645  3000               	movlw	0
   519  0646  00F4               	movwf	lcd_cmd@b
   520  0647  00F5               	movwf	lcd_cmd@b+1
   521  0648  3038               	movlw	56
   522  0649  00A0               	movwf	??_main
   523  064A  0820               	movf	??_main,w
   524  064B  00F6               	movwf	lcd_cmd@c
   525  064C  120A  118A  25F0  120A  118A  	fcall	_lcd_cmd
   526  0651                     l958:
   527                           
   528                           ;Industrial automation.c: 109:  lcd_cmd(0,0,0X0E);
   529  0651  3000               	movlw	0
   530  0652  00F2               	movwf	lcd_cmd@a
   531  0653  00F3               	movwf	lcd_cmd@a+1
   532  0654  3000               	movlw	0
   533  0655  00F4               	movwf	lcd_cmd@b
   534  0656  00F5               	movwf	lcd_cmd@b+1
   535  0657  300E               	movlw	14
   536  0658  1283               	bcf	3,5	;RP0=0, select bank0
   537  0659  1303               	bcf	3,6	;RP1=0, select bank0
   538  065A  00A0               	movwf	??_main
   539  065B  0820               	movf	??_main,w
   540  065C  00F6               	movwf	lcd_cmd@c
   541  065D  120A  118A  25F0  120A  118A  	fcall	_lcd_cmd
   542  0662                     l960:
   543                           
   544                           ;Industrial automation.c: 113:  {;Industrial automation.c: 114:         if(RA1==1)
   545  0662  1283               	bcf	3,5	;RP0=0, select bank0
   546  0663  1303               	bcf	3,6	;RP1=0, select bank0
   547  0664  1C85               	btfss	5,1	;volatile
   548  0665  2E67               	goto	u411
   549  0666  2E68               	goto	u410
   550  0667                     u411:
   551  0667  2E99               	goto	l976
   552  0668                     u410:
   553  0668                     l962:
   554                           
   555                           ;Industrial automation.c: 115:         {;Industrial automation.c: 117:             I2C_S
      +                          tart();
   556  0668  120A  118A  2573  120A  118A  	fcall	_I2C_Start
   557  066D                     l964:
   558                           
   559                           ;Industrial automation.c: 118:             I2C_Slave(0XD0);
   560  066D  30D0               	movlw	208
   561  066E  120A  118A  2594  120A  118A  	fcall	_I2C_Slave
   562  0673                     l966:
   563                           
   564                           ;Industrial automation.c: 119:             I2C_Slave(0X00);
   565  0673  3000               	movlw	0
   566  0674  120A  118A  2594  120A  118A  	fcall	_I2C_Slave
   567  0679                     l968:
   568                           
   569                           ;Industrial automation.c: 120:             I2C_Slave(0X00);
   570  0679  3000               	movlw	0
   571  067A  120A  118A  2594  120A  118A  	fcall	_I2C_Slave
   572  067F                     l970:
   573                           
   574                           ;Industrial automation.c: 121:             I2C_Slave(0X00);
   575  067F  3000               	movlw	0
   576  0680  120A  118A  2594  120A  118A  	fcall	_I2C_Slave
   577  0685                     l972:
   578                           
   579                           ;Industrial automation.c: 122:             I2C_Slave(0X00);
   580  0685  3000               	movlw	0
   581  0686  120A  118A  2594  120A  118A  	fcall	_I2C_Slave
   582  068B                     l974:
   583                           
   584                           ;Industrial automation.c: 123:             I2C_Stop();
   585  068B  120A  118A  257C  120A  118A  	fcall	_I2C_Stop
   586                           
   587                           ;Industrial automation.c: 124:             delay(1000);
   588  0690  30E8               	movlw	232
   589  0691  00F0               	movwf	delay@ms
   590  0692  3003               	movlw	3
   591  0693  00F1               	movwf	delay@ms+1
   592  0694  120A  118A  2585  120A  118A  	fcall	_delay
   593  0699                     l976:
   594                           
   595                           ;Industrial automation.c: 126:   I2C_Start();
   596  0699  120A  118A  2573  120A  118A  	fcall	_I2C_Start
   597  069E                     l978:
   598                           
   599                           ;Industrial automation.c: 127:   I2C_Slave(0XD0);
   600  069E  30D0               	movlw	208
   601  069F  120A  118A  2594  120A  118A  	fcall	_I2C_Slave
   602  06A4                     l980:
   603                           
   604                           ;Industrial automation.c: 128:   I2C_Slave(0X00);
   605  06A4  3000               	movlw	0
   606  06A5  120A  118A  2594  120A  118A  	fcall	_I2C_Slave
   607  06AA                     l982:
   608                           
   609                           ;Industrial automation.c: 129:   I2C_Restart();
   610  06AA  120A  118A  256A  120A  118A  	fcall	_I2C_Restart
   611                           
   612                           ;Industrial automation.c: 130:   I2C_Slave(0XD1);
   613  06AF  30D1               	movlw	209
   614  06B0  120A  118A  2594  120A  118A  	fcall	_I2C_Slave
   615  06B5                     l984:
   616                           
   617                           ;Industrial automation.c: 131:   for(i=0;i<3;i++)
   618  06B5  1283               	bcf	3,5	;RP0=0, select bank0
   619  06B6  1303               	bcf	3,6	;RP1=0, select bank0
   620  06B7  01A9               	clrf	main@i
   621  06B8                     l114:
   622                           
   623                           ;Industrial automation.c: 132:   {;Industrial automation.c: 133:    RCEN=1;
   624  06B8  1683               	bsf	3,5	;RP0=1, select bank1
   625  06B9  1303               	bcf	3,6	;RP1=0, select bank1
   626  06BA  1591               	bsf	17,3	;volatile
   627  06BB                     l990:
   628                           
   629                           ;Industrial automation.c: 134:    read[i]=I2C_Read(i);
   630  06BB  1283               	bcf	3,5	;RP0=0, select bank0
   631  06BC  1303               	bcf	3,6	;RP1=0, select bank0
   632  06BD  0829               	movf	main@i,w
   633  06BE  00A0               	movwf	??_main
   634  06BF  01A1               	clrf	??_main+1
   635  06C0  0820               	movf	??_main,w
   636  06C1  00F0               	movwf	I2C_Read@i
   637  06C2  0821               	movf	??_main+1,w
   638  06C3  00F1               	movwf	I2C_Read@i+1
   639  06C4  120A  118A  25A8  120A  118A  	fcall	_I2C_Read
   640  06C9  1283               	bcf	3,5	;RP0=0, select bank0
   641  06CA  1303               	bcf	3,6	;RP1=0, select bank0
   642  06CB  00A2               	movwf	??_main+2
   643  06CC  0829               	movf	main@i,w
   644  06CD  3E23               	addlw	(low (main@read| 0))& (0+255)
   645  06CE  0084               	movwf	4
   646  06CF  0822               	movf	??_main+2,w
   647  06D0  1383               	bcf	3,7	;select IRP bank0
   648  06D1  0080               	movwf	0
   649  06D2                     l992:
   650                           
   651                           ;Industrial automation.c: 135:   }
   652  06D2  3001               	movlw	1
   653  06D3  00A0               	movwf	??_main
   654  06D4  0820               	movf	??_main,w
   655  06D5  07A9               	addwf	main@i,f
   656  06D6                     l994:
   657  06D6  3003               	movlw	3
   658  06D7  0229               	subwf	main@i,w
   659  06D8  1C03               	skipc
   660  06D9  2EDB               	goto	u421
   661  06DA  2EDC               	goto	u420
   662  06DB                     u421:
   663  06DB  2EB8               	goto	l114
   664  06DC                     u420:
   665  06DC                     l996:
   666                           
   667                           ;Industrial automation.c: 136:   I2C_Stop();
   668  06DC  120A  118A  257C  120A  118A  	fcall	_I2C_Stop
   669  06E1                     l998:
   670                           
   671                           ;Industrial automation.c: 137:   conversion(read);
   672  06E1  3023               	movlw	(low (main@read| 0))& (0+255)
   673  06E2  120A  118A  26F4  120A  118A  	fcall	_conversion
   674  06E7                     l1000:
   675                           
   676                           ;Industrial automation.c: 138:   delay(1000);
   677  06E7  30E8               	movlw	232
   678  06E8  00F0               	movwf	delay@ms
   679  06E9  3003               	movlw	3
   680  06EA  00F1               	movwf	delay@ms+1
   681  06EB  120A  118A  2585  120A  118A  	fcall	_delay
   682  06F0  2E62               	goto	l960
   683  06F1  120A  118A  2800   	ljmp	start
   684  06F4                     __end_of_main:
   685                           
   686                           	psect	text1
   687  06F4                     __ptext1:	
   688 ;; *************** function _conversion *****************
   689 ;; Defined at:
   690 ;;		line 64 in file "Industrial automation.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;  disp            1    wreg     PTR unsigned char 
   693 ;;		 -> main@read(6), 
   694 ;; Auto vars:     Size  Location     Type
   695 ;;  disp            1   11[COMMON] PTR unsigned char 
   696 ;;		 -> main@read(6), 
   697 ;; Return value:  Size  Location     Type
   698 ;;                  1    wreg      void 
   699 ;; Registers used:
   700 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   701 ;; Tracked objects:
   702 ;;		On entry : 0/0
   703 ;;		On exit  : 0/0
   704 ;;		Unchanged: 0/0
   705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   706 ;;      Params:         0       0       0       0       0
   707 ;;      Locals:         1       0       0       0       0
   708 ;;      Temps:          2       0       0       0       0
   709 ;;      Totals:         3       0       0       0       0
   710 ;;Total ram usage:        3 bytes
   711 ;; Hardware stack levels used: 1
   712 ;; Hardware stack levels required when called: 3
   713 ;; This function calls:
   714 ;;		_lcd_cmd
   715 ;;		_string
   716 ;; This function is called by:
   717 ;;		_main
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721  06F4                     _conversion:	
   722                           ;psect for function _conversion
   723                           
   724                           
   725                           ;incstack = 0
   726                           ; Regs used in _conversion: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   727                           ;conversion@disp stored from wreg
   728  06F4  00FB               	movwf	conversion@disp
   729  06F5                     l914:
   730                           
   731                           ;Industrial automation.c: 64: void conversion(char disp[]);Industrial automation.c: 65: 
      +                          {;Industrial automation.c: 66:  lcd_cmd(0,0,0X80);
   732  06F5  3000               	movlw	0
   733  06F6  00F2               	movwf	lcd_cmd@a
   734  06F7  00F3               	movwf	lcd_cmd@a+1
   735  06F8  3000               	movlw	0
   736  06F9  00F4               	movwf	lcd_cmd@b
   737  06FA  00F5               	movwf	lcd_cmd@b+1
   738  06FB  3080               	movlw	128
   739  06FC  00F9               	movwf	??_conversion
   740  06FD  0879               	movf	??_conversion,w
   741  06FE  00F6               	movwf	lcd_cmd@c
   742  06FF  120A  118A  25F0  120A  118A  	fcall	_lcd_cmd
   743  0704                     l916:
   744                           
   745                           ;Industrial automation.c: 67:  string("time: ");
   746  0704  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   747  0705  120A  118A  25C7  120A  118A  	fcall	_string
   748  070A                     l918:
   749                           
   750                           ;Industrial automation.c: 68:  lcd_cmd(1,0,((disp[2]&0X30)>>4)+0X30);
   751  070A  3001               	movlw	1
   752  070B  00F2               	movwf	lcd_cmd@a
   753  070C  3000               	movlw	0
   754  070D  00F3               	movwf	lcd_cmd@a+1
   755  070E  3000               	movlw	0
   756  070F  00F4               	movwf	lcd_cmd@b
   757  0710  00F5               	movwf	lcd_cmd@b+1
   758  0711  087B               	movf	conversion@disp,w
   759  0712  3E02               	addlw	2
   760  0713  0084               	movwf	4
   761  0714  1383               	bcf	3,7	;select IRP bank0
   762  0715  0800               	movf	0,w
   763  0716  00F9               	movwf	??_conversion
   764  0717  3004               	movlw	4
   765  0718                     u325:
   766  0718  1003               	clrc
   767  0719  0CF9               	rrf	??_conversion,f
   768  071A  3EFF               	addlw	-1
   769  071B  1D03               	skipz
   770  071C  2F18               	goto	u325
   771  071D  0879               	movf	??_conversion,w
   772  071E  3903               	andlw	3
   773  071F  3E30               	addlw	48
   774  0720  00FA               	movwf	??_conversion+1
   775  0721  087A               	movf	??_conversion+1,w
   776  0722  00F6               	movwf	lcd_cmd@c
   777  0723  120A  118A  25F0  120A  118A  	fcall	_lcd_cmd
   778  0728                     l920:
   779                           
   780                           ;Industrial automation.c: 69:  lcd_cmd(1,0,(disp[2]&0X0F)+0X30);
   781  0728  3001               	movlw	1
   782  0729  00F2               	movwf	lcd_cmd@a
   783  072A  3000               	movlw	0
   784  072B  00F3               	movwf	lcd_cmd@a+1
   785  072C  3000               	movlw	0
   786  072D  00F4               	movwf	lcd_cmd@b
   787  072E  00F5               	movwf	lcd_cmd@b+1
   788  072F  087B               	movf	conversion@disp,w
   789  0730  3E02               	addlw	2
   790  0731  0084               	movwf	4
   791  0732  1383               	bcf	3,7	;select IRP bank0
   792  0733  0800               	movf	0,w
   793  0734  390F               	andlw	15
   794  0735  3E30               	addlw	48
   795  0736  00F9               	movwf	??_conversion
   796  0737  0879               	movf	??_conversion,w
   797  0738  00F6               	movwf	lcd_cmd@c
   798  0739  120A  118A  25F0  120A  118A  	fcall	_lcd_cmd
   799  073E                     l922:
   800                           
   801                           ;Industrial automation.c: 70:  lcd_cmd(1,0,':');
   802  073E  3001               	movlw	1
   803  073F  00F2               	movwf	lcd_cmd@a
   804  0740  3000               	movlw	0
   805  0741  00F3               	movwf	lcd_cmd@a+1
   806  0742  3000               	movlw	0
   807  0743  00F4               	movwf	lcd_cmd@b
   808  0744  00F5               	movwf	lcd_cmd@b+1
   809  0745  303A               	movlw	58
   810  0746  00F9               	movwf	??_conversion
   811  0747  0879               	movf	??_conversion,w
   812  0748  00F6               	movwf	lcd_cmd@c
   813  0749  120A  118A  25F0  120A  118A  	fcall	_lcd_cmd
   814                           
   815                           ;Industrial automation.c: 72:  lcd_cmd(1,0,((disp[1]&0X70)>>4)+0X30);
   816  074E  3001               	movlw	1
   817  074F  00F2               	movwf	lcd_cmd@a
   818  0750  3000               	movlw	0
   819  0751  00F3               	movwf	lcd_cmd@a+1
   820  0752  3000               	movlw	0
   821  0753  00F4               	movwf	lcd_cmd@b
   822  0754  00F5               	movwf	lcd_cmd@b+1
   823  0755  0A7B               	incf	conversion@disp,w
   824  0756  0084               	movwf	4
   825  0757  1383               	bcf	3,7	;select IRP bank0
   826  0758  0800               	movf	0,w
   827  0759  00F9               	movwf	??_conversion
   828  075A  3004               	movlw	4
   829  075B                     u335:
   830  075B  1003               	clrc
   831  075C  0CF9               	rrf	??_conversion,f
   832  075D  3EFF               	addlw	-1
   833  075E  1D03               	skipz
   834  075F  2F5B               	goto	u335
   835  0760  0879               	movf	??_conversion,w
   836  0761  3907               	andlw	7
   837  0762  3E30               	addlw	48
   838  0763  00FA               	movwf	??_conversion+1
   839  0764  087A               	movf	??_conversion+1,w
   840  0765  00F6               	movwf	lcd_cmd@c
   841  0766  120A  118A  25F0  120A  118A  	fcall	_lcd_cmd
   842                           
   843                           ;Industrial automation.c: 73:  lcd_cmd(1,0,(disp[1]&0X0F)+0X30);
   844  076B  3001               	movlw	1
   845  076C  00F2               	movwf	lcd_cmd@a
   846  076D  3000               	movlw	0
   847  076E  00F3               	movwf	lcd_cmd@a+1
   848  076F  3000               	movlw	0
   849  0770  00F4               	movwf	lcd_cmd@b
   850  0771  00F5               	movwf	lcd_cmd@b+1
   851  0772  0A7B               	incf	conversion@disp,w
   852  0773  0084               	movwf	4
   853  0774  1383               	bcf	3,7	;select IRP bank0
   854  0775  0800               	movf	0,w
   855  0776  390F               	andlw	15
   856  0777  3E30               	addlw	48
   857  0778  00F9               	movwf	??_conversion
   858  0779  0879               	movf	??_conversion,w
   859  077A  00F6               	movwf	lcd_cmd@c
   860  077B  120A  118A  25F0  120A  118A  	fcall	_lcd_cmd
   861  0780                     l924:
   862                           
   863                           ;Industrial automation.c: 74:  lcd_cmd(1,0,':');
   864  0780  3001               	movlw	1
   865  0781  00F2               	movwf	lcd_cmd@a
   866  0782  3000               	movlw	0
   867  0783  00F3               	movwf	lcd_cmd@a+1
   868  0784  3000               	movlw	0
   869  0785  00F4               	movwf	lcd_cmd@b
   870  0786  00F5               	movwf	lcd_cmd@b+1
   871  0787  303A               	movlw	58
   872  0788  00F9               	movwf	??_conversion
   873  0789  0879               	movf	??_conversion,w
   874  078A  00F6               	movwf	lcd_cmd@c
   875  078B  120A  118A  25F0  120A  118A  	fcall	_lcd_cmd
   876  0790                     l926:
   877                           
   878                           ;Industrial automation.c: 76:  lcd_cmd(1,0,((disp[0]&0X70)>>4)+0X30);
   879  0790  3001               	movlw	1
   880  0791  00F2               	movwf	lcd_cmd@a
   881  0792  3000               	movlw	0
   882  0793  00F3               	movwf	lcd_cmd@a+1
   883  0794  3000               	movlw	0
   884  0795  00F4               	movwf	lcd_cmd@b
   885  0796  00F5               	movwf	lcd_cmd@b+1
   886  0797  087B               	movf	conversion@disp,w
   887  0798  0084               	movwf	4
   888  0799  1383               	bcf	3,7	;select IRP bank0
   889  079A  0800               	movf	0,w
   890  079B  00F9               	movwf	??_conversion
   891  079C  3004               	movlw	4
   892  079D                     u345:
   893  079D  1003               	clrc
   894  079E  0CF9               	rrf	??_conversion,f
   895  079F  3EFF               	addlw	-1
   896  07A0  1D03               	skipz
   897  07A1  2F9D               	goto	u345
   898  07A2  0879               	movf	??_conversion,w
   899  07A3  3907               	andlw	7
   900  07A4  3E30               	addlw	48
   901  07A5  00FA               	movwf	??_conversion+1
   902  07A6  087A               	movf	??_conversion+1,w
   903  07A7  00F6               	movwf	lcd_cmd@c
   904  07A8  120A  118A  25F0  120A  118A  	fcall	_lcd_cmd
   905  07AD                     l928:
   906                           
   907                           ;Industrial automation.c: 77:  lcd_cmd(1,0,(disp[0]&0X0F)+0X30);
   908  07AD  3001               	movlw	1
   909  07AE  00F2               	movwf	lcd_cmd@a
   910  07AF  3000               	movlw	0
   911  07B0  00F3               	movwf	lcd_cmd@a+1
   912  07B1  3000               	movlw	0
   913  07B2  00F4               	movwf	lcd_cmd@b
   914  07B3  00F5               	movwf	lcd_cmd@b+1
   915  07B4  087B               	movf	conversion@disp,w
   916  07B5  0084               	movwf	4
   917  07B6  1383               	bcf	3,7	;select IRP bank0
   918  07B7  0800               	movf	0,w
   919  07B8  390F               	andlw	15
   920  07B9  3E30               	addlw	48
   921  07BA  00F9               	movwf	??_conversion
   922  07BB  0879               	movf	??_conversion,w
   923  07BC  00F6               	movwf	lcd_cmd@c
   924  07BD  120A  118A  25F0  120A  118A  	fcall	_lcd_cmd
   925  07C2                     l930:
   926                           
   927                           ;Industrial automation.c: 78:     if(disp[2]==0X07&&disp[1]==0X33&&disp[0]==0X00)
   928  07C2  087B               	movf	conversion@disp,w
   929  07C3  3E02               	addlw	2
   930  07C4  0084               	movwf	4
   931  07C5  3007               	movlw	7
   932  07C6  1383               	bcf	3,7	;select IRP bank0
   933  07C7  0600               	xorwf	0,w
   934  07C8  1D03               	btfss	3,2
   935  07C9  2FCB               	goto	u351
   936  07CA  2FCC               	goto	u350
   937  07CB                     u351:
   938  07CB  2FDF               	goto	l938
   939  07CC                     u350:
   940  07CC                     l932:
   941  07CC  0A7B               	incf	conversion@disp,w
   942  07CD  0084               	movwf	4
   943  07CE  3033               	movlw	51
   944  07CF  0600               	xorwf	0,w
   945  07D0  1D03               	btfss	3,2
   946  07D1  2FD3               	goto	u361
   947  07D2  2FD4               	goto	u360
   948  07D3                     u361:
   949  07D3  2FDF               	goto	l938
   950  07D4                     u360:
   951  07D4                     l934:
   952  07D4  087B               	movf	conversion@disp,w
   953  07D5  0084               	movwf	4
   954  07D6  0800               	movf	0,w
   955  07D7  1D03               	btfss	3,2
   956  07D8  2FDA               	goto	u371
   957  07D9  2FDB               	goto	u370
   958  07DA                     u371:
   959  07DA  2FDF               	goto	l938
   960  07DB                     u370:
   961  07DB                     l936:
   962                           
   963                           ;Industrial automation.c: 79:     {;Industrial automation.c: 80:         RC6=1;
   964  07DB  1283               	bcf	3,5	;RP0=0, select bank0
   965  07DC  1303               	bcf	3,6	;RP1=0, select bank0
   966  07DD  1707               	bsf	7,6	;volatile
   967                           
   968                           ;Industrial automation.c: 81:         RC7=0;
   969  07DE  1387               	bcf	7,7	;volatile
   970  07DF                     l938:
   971                           
   972                           ;Industrial automation.c: 83:     if(disp[2]==0X07&&disp[1]==0X36&&disp[0]==0X00)
   973  07DF  087B               	movf	conversion@disp,w
   974  07E0  3E02               	addlw	2
   975  07E1  0084               	movwf	4
   976  07E2  3007               	movlw	7
   977  07E3  0600               	xorwf	0,w
   978  07E4  1D03               	btfss	3,2
   979  07E5  2FE7               	goto	u381
   980  07E6  2FE8               	goto	u380
   981  07E7                     u381:
   982  07E7  2FFB               	goto	l107
   983  07E8                     u380:
   984  07E8                     l940:
   985  07E8  0A7B               	incf	conversion@disp,w
   986  07E9  0084               	movwf	4
   987  07EA  3036               	movlw	54
   988  07EB  0600               	xorwf	0,w
   989  07EC  1D03               	btfss	3,2
   990  07ED  2FEF               	goto	u391
   991  07EE  2FF0               	goto	u390
   992  07EF                     u391:
   993  07EF  2FFB               	goto	l107
   994  07F0                     u390:
   995  07F0                     l942:
   996  07F0  087B               	movf	conversion@disp,w
   997  07F1  0084               	movwf	4
   998  07F2  0800               	movf	0,w
   999  07F3  1D03               	btfss	3,2
  1000  07F4  2FF6               	goto	u401
  1001  07F5  2FF7               	goto	u400
  1002  07F6                     u401:
  1003  07F6  2FFB               	goto	l107
  1004  07F7                     u400:
  1005  07F7                     l944:
  1006                           
  1007                           ;Industrial automation.c: 84:     {;Industrial automation.c: 85:         RC6=0;
  1008  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  1009  07F8  1303               	bcf	3,6	;RP1=0, select bank0
  1010  07F9  1307               	bcf	7,6	;volatile
  1011                           
  1012                           ;Industrial automation.c: 86:         RC7=1;
  1013  07FA  1787               	bsf	7,7	;volatile
  1014  07FB                     l107:
  1015  07FB  0008               	return
  1016  07FC                     __end_of_conversion:
  1017                           
  1018                           	psect	text2
  1019  05C7                     __ptext2:	
  1020 ;; *************** function _string *****************
  1021 ;; Defined at:
  1022 ;;		line 57 in file "Industrial automation.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;  p               1    wreg     PTR unsigned char 
  1025 ;;		 -> STR_1(7), 
  1026 ;; Auto vars:     Size  Location     Type
  1027 ;;  p               1    8[COMMON] PTR unsigned char 
  1028 ;;		 -> STR_1(7), 
  1029 ;; Return value:  Size  Location     Type
  1030 ;;                  1    wreg      void 
  1031 ;; Registers used:
  1032 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1033 ;; Tracked objects:
  1034 ;;		On entry : 0/0
  1035 ;;		On exit  : 0/0
  1036 ;;		Unchanged: 0/0
  1037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1038 ;;      Params:         0       0       0       0       0
  1039 ;;      Locals:         1       0       0       0       0
  1040 ;;      Temps:          1       0       0       0       0
  1041 ;;      Totals:         2       0       0       0       0
  1042 ;;Total ram usage:        2 bytes
  1043 ;; Hardware stack levels used: 1
  1044 ;; Hardware stack levels required when called: 2
  1045 ;; This function calls:
  1046 ;;		_lcd_cmd
  1047 ;; This function is called by:
  1048 ;;		_conversion
  1049 ;; This function uses a non-reentrant model
  1050 ;;
  1051                           
  1052  05C7                     _string:	
  1053                           ;psect for function _string
  1054                           
  1055                           
  1056                           ;incstack = 0
  1057                           ; Regs used in _string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1058                           ;string@p stored from wreg
  1059  05C7  00F8               	movwf	string@p
  1060  05C8                     l874:
  1061                           
  1062                           ;Industrial automation.c: 57: void string(char *p);Industrial automation.c: 58: {;Indust
      +                          rial automation.c: 59:  while(*p)
  1063  05C8  2DE3               	goto	l880
  1064  05C9                     l876:
  1065                           
  1066                           ;Industrial automation.c: 60:  {;Industrial automation.c: 61:   lcd_cmd(1,0,*p++);
  1067  05C9  3001               	movlw	1
  1068  05CA  00F2               	movwf	lcd_cmd@a
  1069  05CB  3000               	movlw	0
  1070  05CC  00F3               	movwf	lcd_cmd@a+1
  1071  05CD  3000               	movlw	0
  1072  05CE  00F4               	movwf	lcd_cmd@b
  1073  05CF  00F5               	movwf	lcd_cmd@b+1
  1074  05D0  0878               	movf	string@p,w
  1075  05D1  0084               	movwf	4
  1076  05D2  120A  118A  2003  120A  118A  	fcall	stringdir
  1077  05D7  00F7               	movwf	??_string
  1078  05D8  0877               	movf	??_string,w
  1079  05D9  00F6               	movwf	lcd_cmd@c
  1080  05DA  120A  118A  25F0  120A  118A  	fcall	_lcd_cmd
  1081  05DF                     l878:
  1082  05DF  3001               	movlw	1
  1083  05E0  00F7               	movwf	??_string
  1084  05E1  0877               	movf	??_string,w
  1085  05E2  07F8               	addwf	string@p,f
  1086  05E3                     l880:
  1087                           
  1088                           ;Industrial automation.c: 59:  while(*p)
  1089  05E3  0878               	movf	string@p,w
  1090  05E4  0084               	movwf	4
  1091  05E5  120A  118A  2003  120A  118A  	fcall	stringdir
  1092  05EA  3A00               	xorlw	0
  1093  05EB  1D03               	skipz
  1094  05EC  2DEE               	goto	u281
  1095  05ED  2DEF               	goto	u280
  1096  05EE                     u281:
  1097  05EE  2DC9               	goto	l876
  1098  05EF                     u280:
  1099  05EF                     l102:
  1100  05EF  0008               	return
  1101  05F0                     __end_of_string:
  1102                           
  1103                           	psect	text3
  1104  05F0                     __ptext3:	
  1105 ;; *************** function _lcd_cmd *****************
  1106 ;; Defined at:
  1107 ;;		line 9 in file "./lcd.h"
  1108 ;; Parameters:    Size  Location     Type
  1109 ;;  a               2    2[COMMON] int 
  1110 ;;  b               2    4[COMMON] int 
  1111 ;;  c               1    6[COMMON] unsigned char 
  1112 ;; Auto vars:     Size  Location     Type
  1113 ;;		None
  1114 ;; Return value:  Size  Location     Type
  1115 ;;                  1    wreg      void 
  1116 ;; Registers used:
  1117 ;;		wreg, status,2, status,0, pclath, cstack
  1118 ;; Tracked objects:
  1119 ;;		On entry : 0/0
  1120 ;;		On exit  : 0/0
  1121 ;;		Unchanged: 0/0
  1122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1123 ;;      Params:         5       0       0       0       0
  1124 ;;      Locals:         0       0       0       0       0
  1125 ;;      Temps:          0       0       0       0       0
  1126 ;;      Totals:         5       0       0       0       0
  1127 ;;Total ram usage:        5 bytes
  1128 ;; Hardware stack levels used: 1
  1129 ;; Hardware stack levels required when called: 1
  1130 ;; This function calls:
  1131 ;;		_delay
  1132 ;; This function is called by:
  1133 ;;		_string
  1134 ;;		_conversion
  1135 ;;		_main
  1136 ;; This function uses a non-reentrant model
  1137 ;;
  1138                           
  1139  05F0                     _lcd_cmd:	
  1140                           ;psect for function _lcd_cmd
  1141                           
  1142  05F0                     l860:	
  1143                           ;incstack = 0
  1144                           ; Regs used in _lcd_cmd: [wreg+status,2+status,0+pclath+cstack]
  1145                           
  1146                           
  1147                           ;./lcd.h: 9: void lcd_cmd(int a,int b, char c);./lcd.h: 10: {;./lcd.h: 11:  RE0=a;
  1148  05F0  1872               	btfsc	lcd_cmd@a,0
  1149  05F1  2DF3               	goto	u231
  1150  05F2  2DF7               	goto	u230
  1151  05F3                     u231:
  1152  05F3  1283               	bcf	3,5	;RP0=0, select bank0
  1153  05F4  1303               	bcf	3,6	;RP1=0, select bank0
  1154  05F5  1409               	bsf	9,0	;volatile
  1155  05F6  2DFA               	goto	u244
  1156  05F7                     u230:
  1157  05F7  1283               	bcf	3,5	;RP0=0, select bank0
  1158  05F8  1303               	bcf	3,6	;RP1=0, select bank0
  1159  05F9  1009               	bcf	9,0	;volatile
  1160  05FA                     u244:
  1161                           
  1162                           ;./lcd.h: 12:  RE1=b;
  1163  05FA  1874               	btfsc	lcd_cmd@b,0
  1164  05FB  2DFD               	goto	u251
  1165  05FC  2E01               	goto	u250
  1166  05FD                     u251:
  1167  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  1168  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  1169  05FF  1489               	bsf	9,1	;volatile
  1170  0600  2E04               	goto	u264
  1171  0601                     u250:
  1172  0601  1283               	bcf	3,5	;RP0=0, select bank0
  1173  0602  1303               	bcf	3,6	;RP1=0, select bank0
  1174  0603  1089               	bcf	9,1	;volatile
  1175  0604                     u264:
  1176  0604                     l862:
  1177                           
  1178                           ;./lcd.h: 13:  PORTD=c;
  1179  0604  0876               	movf	lcd_cmd@c,w
  1180  0605  0088               	movwf	8	;volatile
  1181  0606                     l864:
  1182                           
  1183                           ;./lcd.h: 14:  RE2=1;
  1184  0606  1509               	bsf	9,2	;volatile
  1185  0607                     l866:
  1186                           
  1187                           ;./lcd.h: 15:  delay(1000);
  1188  0607  30E8               	movlw	232
  1189  0608  00F0               	movwf	delay@ms
  1190  0609  3003               	movlw	3
  1191  060A  00F1               	movwf	delay@ms+1
  1192  060B  120A  118A  2585  120A  118A  	fcall	_delay
  1193  0610                     l868:
  1194                           
  1195                           ;./lcd.h: 16:  RE2=0;
  1196  0610  1283               	bcf	3,5	;RP0=0, select bank0
  1197  0611  1303               	bcf	3,6	;RP1=0, select bank0
  1198  0612  1109               	bcf	9,2	;volatile
  1199  0613                     l870:
  1200                           
  1201                           ;./lcd.h: 17:  delay(1000);
  1202  0613  30E8               	movlw	232
  1203  0614  00F0               	movwf	delay@ms
  1204  0615  3003               	movlw	3
  1205  0616  00F1               	movwf	delay@ms+1
  1206  0617  120A  118A  2585  120A  118A  	fcall	_delay
  1207  061C                     l67:
  1208  061C  0008               	return
  1209  061D                     __end_of_lcd_cmd:
  1210                           
  1211                           	psect	text4
  1212  0585                     __ptext4:	
  1213 ;; *************** function _delay *****************
  1214 ;; Defined at:
  1215 ;;		line 5 in file "./lcd.h"
  1216 ;; Parameters:    Size  Location     Type
  1217 ;;  ms              2    0[COMMON] unsigned int 
  1218 ;; Auto vars:     Size  Location     Type
  1219 ;;		None
  1220 ;; Return value:  Size  Location     Type
  1221 ;;                  1    wreg      void 
  1222 ;; Registers used:
  1223 ;;		wreg, status,2, status,0
  1224 ;; Tracked objects:
  1225 ;;		On entry : 0/0
  1226 ;;		On exit  : 0/0
  1227 ;;		Unchanged: 0/0
  1228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1229 ;;      Params:         2       0       0       0       0
  1230 ;;      Locals:         0       0       0       0       0
  1231 ;;      Temps:          0       0       0       0       0
  1232 ;;      Totals:         2       0       0       0       0
  1233 ;;Total ram usage:        2 bytes
  1234 ;; Hardware stack levels used: 1
  1235 ;; This function calls:
  1236 ;;		Nothing
  1237 ;; This function is called by:
  1238 ;;		_lcd_cmd
  1239 ;;		_main
  1240 ;; This function uses a non-reentrant model
  1241 ;;
  1242                           
  1243  0585                     _delay:	
  1244                           ;psect for function _delay
  1245                           
  1246  0585                     l856:	
  1247                           ;incstack = 0
  1248                           ; Regs used in _delay: [wreg+status,2+status,0]
  1249                           
  1250  0585                     l858:	
  1251                           ;./lcd.h: 5: void delay(unsigned int ms);./lcd.h: 6: {;./lcd.h: 7:  while(ms--);
  1252                           
  1253  0585  3001               	movlw	1
  1254  0586  02F0               	subwf	delay@ms,f
  1255  0587  3000               	movlw	0
  1256  0588  1C03               	skipc
  1257  0589  03F1               	decf	delay@ms+1,f
  1258  058A  02F1               	subwf	delay@ms+1,f
  1259  058B  0A70               	incf	delay@ms,w
  1260  058C  1D03               	skipz
  1261  058D  2D92               	goto	u221
  1262  058E  0A71               	incf	delay@ms+1,w
  1263  058F  1D03               	btfss	3,2
  1264  0590  2D92               	goto	u221
  1265  0591  2D93               	goto	u220
  1266  0592                     u221:
  1267  0592  2D85               	goto	l858
  1268  0593                     u220:
  1269  0593                     l64:
  1270  0593  0008               	return
  1271  0594                     __end_of_delay:
  1272                           
  1273                           	psect	text5
  1274  057C                     __ptext5:	
  1275 ;; *************** function _I2C_Stop *****************
  1276 ;; Defined at:
  1277 ;;		line 22 in file "Industrial automation.c"
  1278 ;; Parameters:    Size  Location     Type
  1279 ;;		None
  1280 ;; Auto vars:     Size  Location     Type
  1281 ;;		None
  1282 ;; Return value:  Size  Location     Type
  1283 ;;                  1    wreg      void 
  1284 ;; Registers used:
  1285 ;;		status,2, status,0, pclath, cstack
  1286 ;; Tracked objects:
  1287 ;;		On entry : 0/0
  1288 ;;		On exit  : 0/0
  1289 ;;		Unchanged: 0/0
  1290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1291 ;;      Params:         0       0       0       0       0
  1292 ;;      Locals:         0       0       0       0       0
  1293 ;;      Temps:          0       0       0       0       0
  1294 ;;      Totals:         0       0       0       0       0
  1295 ;;Total ram usage:        0 bytes
  1296 ;; Hardware stack levels used: 1
  1297 ;; Hardware stack levels required when called: 1
  1298 ;; This function calls:
  1299 ;;		_hold
  1300 ;; This function is called by:
  1301 ;;		_main
  1302 ;; This function uses a non-reentrant model
  1303 ;;
  1304                           
  1305  057C                     _I2C_Stop:	
  1306                           ;psect for function _I2C_Stop
  1307                           
  1308  057C                     l886:	
  1309                           ;incstack = 0
  1310                           ; Regs used in _I2C_Stop: [status,2+status,0+pclath+cstack]
  1311                           
  1312                           
  1313                           ;Industrial automation.c: 24:  PEN=1;
  1314  057C  1683               	bsf	3,5	;RP0=1, select bank1
  1315  057D  1303               	bcf	3,6	;RP1=0, select bank1
  1316  057E  1511               	bsf	17,2	;volatile
  1317  057F                     l888:
  1318                           
  1319                           ;Industrial automation.c: 25:  hold();
  1320  057F  120A  118A  2562  120A  118A  	fcall	_hold
  1321  0584                     l79:
  1322  0584  0008               	return
  1323  0585                     __end_of_I2C_Stop:
  1324                           
  1325                           	psect	text6
  1326  0573                     __ptext6:	
  1327 ;; *************** function _I2C_Start *****************
  1328 ;; Defined at:
  1329 ;;		line 17 in file "Industrial automation.c"
  1330 ;; Parameters:    Size  Location     Type
  1331 ;;		None
  1332 ;; Auto vars:     Size  Location     Type
  1333 ;;		None
  1334 ;; Return value:  Size  Location     Type
  1335 ;;                  1    wreg      void 
  1336 ;; Registers used:
  1337 ;;		status,2, status,0, pclath, cstack
  1338 ;; Tracked objects:
  1339 ;;		On entry : 0/0
  1340 ;;		On exit  : 0/0
  1341 ;;		Unchanged: 0/0
  1342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1343 ;;      Params:         0       0       0       0       0
  1344 ;;      Locals:         0       0       0       0       0
  1345 ;;      Temps:          0       0       0       0       0
  1346 ;;      Totals:         0       0       0       0       0
  1347 ;;Total ram usage:        0 bytes
  1348 ;; Hardware stack levels used: 1
  1349 ;; Hardware stack levels required when called: 1
  1350 ;; This function calls:
  1351 ;;		_hold
  1352 ;; This function is called by:
  1353 ;;		_main
  1354 ;; This function uses a non-reentrant model
  1355 ;;
  1356                           
  1357  0573                     _I2C_Start:	
  1358                           ;psect for function _I2C_Start
  1359                           
  1360  0573                     l882:	
  1361                           ;incstack = 0
  1362                           ; Regs used in _I2C_Start: [status,2+status,0+pclath+cstack]
  1363                           
  1364                           
  1365                           ;Industrial automation.c: 19:  SEN=1;
  1366  0573  1683               	bsf	3,5	;RP0=1, select bank1
  1367  0574  1303               	bcf	3,6	;RP1=0, select bank1
  1368  0575  1411               	bsf	17,0	;volatile
  1369  0576                     l884:
  1370                           
  1371                           ;Industrial automation.c: 20:  hold();
  1372  0576  120A  118A  2562  120A  118A  	fcall	_hold
  1373  057B                     l76:
  1374  057B  0008               	return
  1375  057C                     __end_of_I2C_Start:
  1376                           
  1377                           	psect	text7
  1378  0594                     __ptext7:	
  1379 ;; *************** function _I2C_Slave *****************
  1380 ;; Defined at:
  1381 ;;		line 27 in file "Industrial automation.c"
  1382 ;; Parameters:    Size  Location     Type
  1383 ;;  data            1    wreg     unsigned char 
  1384 ;; Auto vars:     Size  Location     Type
  1385 ;;  data            1    0[COMMON] unsigned char 
  1386 ;; Return value:  Size  Location     Type
  1387 ;;                  1    wreg      void 
  1388 ;; Registers used:
  1389 ;;		wreg, status,2, status,0, pclath, cstack
  1390 ;; Tracked objects:
  1391 ;;		On entry : 0/0
  1392 ;;		On exit  : 0/0
  1393 ;;		Unchanged: 0/0
  1394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1395 ;;      Params:         0       0       0       0       0
  1396 ;;      Locals:         1       0       0       0       0
  1397 ;;      Temps:          0       0       0       0       0
  1398 ;;      Totals:         1       0       0       0       0
  1399 ;;Total ram usage:        1 bytes
  1400 ;; Hardware stack levels used: 1
  1401 ;; Hardware stack levels required when called: 1
  1402 ;; This function calls:
  1403 ;;		_hold
  1404 ;; This function is called by:
  1405 ;;		_main
  1406 ;; This function uses a non-reentrant model
  1407 ;;
  1408                           
  1409  0594                     _I2C_Slave:	
  1410                           ;psect for function _I2C_Slave
  1411                           
  1412                           
  1413                           ;incstack = 0
  1414                           ; Regs used in _I2C_Slave: [wreg+status,2+status,0+pclath+cstack]
  1415                           ;I2C_Slave@data stored from wreg
  1416  0594  00F0               	movwf	I2C_Slave@data
  1417  0595                     l890:
  1418                           
  1419                           ;Industrial automation.c: 27: void I2C_Slave(char data);Industrial automation.c: 28: {;I
      +                          ndustrial automation.c: 29:  ACKSTAT=1;
  1420  0595  1683               	bsf	3,5	;RP0=1, select bank1
  1421  0596  1303               	bcf	3,6	;RP1=0, select bank1
  1422  0597  1711               	bsf	17,6	;volatile
  1423  0598                     l892:
  1424                           
  1425                           ;Industrial automation.c: 30:  SSPBUF=data;
  1426  0598  0870               	movf	I2C_Slave@data,w
  1427  0599  1283               	bcf	3,5	;RP0=0, select bank0
  1428  059A  1303               	bcf	3,6	;RP1=0, select bank0
  1429  059B  0093               	movwf	19	;volatile
  1430  059C                     l82:	
  1431                           ;Industrial automation.c: 31:  while(ACKSTAT==1);
  1432                           
  1433  059C  1683               	bsf	3,5	;RP0=1, select bank1
  1434  059D  1303               	bcf	3,6	;RP1=0, select bank1
  1435  059E  1B11               	btfsc	17,6	;volatile
  1436  059F  2DA1               	goto	u291
  1437  05A0  2DA2               	goto	u290
  1438  05A1                     u291:
  1439  05A1  2D9C               	goto	l82
  1440  05A2                     u290:
  1441  05A2                     l894:
  1442                           
  1443                           ;Industrial automation.c: 32:  hold();
  1444  05A2  120A  118A  2562  120A  118A  	fcall	_hold
  1445  05A7                     l85:
  1446  05A7  0008               	return
  1447  05A8                     __end_of_I2C_Slave:
  1448                           
  1449                           	psect	text8
  1450  056A                     __ptext8:	
  1451 ;; *************** function _I2C_Restart *****************
  1452 ;; Defined at:
  1453 ;;		line 34 in file "Industrial automation.c"
  1454 ;; Parameters:    Size  Location     Type
  1455 ;;		None
  1456 ;; Auto vars:     Size  Location     Type
  1457 ;;		None
  1458 ;; Return value:  Size  Location     Type
  1459 ;;                  1    wreg      void 
  1460 ;; Registers used:
  1461 ;;		status,2, status,0, pclath, cstack
  1462 ;; Tracked objects:
  1463 ;;		On entry : 0/0
  1464 ;;		On exit  : 0/0
  1465 ;;		Unchanged: 0/0
  1466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1467 ;;      Params:         0       0       0       0       0
  1468 ;;      Locals:         0       0       0       0       0
  1469 ;;      Temps:          0       0       0       0       0
  1470 ;;      Totals:         0       0       0       0       0
  1471 ;;Total ram usage:        0 bytes
  1472 ;; Hardware stack levels used: 1
  1473 ;; Hardware stack levels required when called: 1
  1474 ;; This function calls:
  1475 ;;		_hold
  1476 ;; This function is called by:
  1477 ;;		_main
  1478 ;; This function uses a non-reentrant model
  1479 ;;
  1480                           
  1481  056A                     _I2C_Restart:	
  1482                           ;psect for function _I2C_Restart
  1483                           
  1484  056A                     l896:	
  1485                           ;incstack = 0
  1486                           ; Regs used in _I2C_Restart: [status,2+status,0+pclath+cstack]
  1487                           
  1488                           
  1489                           ;Industrial automation.c: 36:  RSEN=1;
  1490  056A  1683               	bsf	3,5	;RP0=1, select bank1
  1491  056B  1303               	bcf	3,6	;RP1=0, select bank1
  1492  056C  1491               	bsf	17,1	;volatile
  1493  056D                     l898:
  1494                           
  1495                           ;Industrial automation.c: 37:  hold();
  1496  056D  120A  118A  2562  120A  118A  	fcall	_hold
  1497  0572                     l88:
  1498  0572  0008               	return
  1499  0573                     __end_of_I2C_Restart:
  1500                           
  1501                           	psect	text9
  1502  0562                     __ptext9:	
  1503 ;; *************** function _hold *****************
  1504 ;; Defined at:
  1505 ;;		line 12 in file "Industrial automation.c"
  1506 ;; Parameters:    Size  Location     Type
  1507 ;;		None
  1508 ;; Auto vars:     Size  Location     Type
  1509 ;;		None
  1510 ;; Return value:  Size  Location     Type
  1511 ;;                  1    wreg      void 
  1512 ;; Registers used:
  1513 ;;		None
  1514 ;; Tracked objects:
  1515 ;;		On entry : 0/0
  1516 ;;		On exit  : 0/0
  1517 ;;		Unchanged: 0/0
  1518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1519 ;;      Params:         0       0       0       0       0
  1520 ;;      Locals:         0       0       0       0       0
  1521 ;;      Temps:          0       0       0       0       0
  1522 ;;      Totals:         0       0       0       0       0
  1523 ;;Total ram usage:        0 bytes
  1524 ;; Hardware stack levels used: 1
  1525 ;; This function calls:
  1526 ;;		Nothing
  1527 ;; This function is called by:
  1528 ;;		_I2C_Start
  1529 ;;		_I2C_Stop
  1530 ;;		_I2C_Slave
  1531 ;;		_I2C_Restart
  1532 ;; This function uses a non-reentrant model
  1533 ;;
  1534                           
  1535  0562                     _hold:	
  1536                           ;psect for function _hold
  1537                           
  1538  0562                     l872:	
  1539                           ;incstack = 0
  1540                           ; Regs used in _hold: []
  1541                           
  1542  0562                     l70:	
  1543                           ;Industrial automation.c: 14:  while(SSPIF==0);
  1544                           
  1545  0562  1283               	bcf	3,5	;RP0=0, select bank0
  1546  0563  1303               	bcf	3,6	;RP1=0, select bank0
  1547  0564  1D8C               	btfss	12,3	;volatile
  1548  0565  2D67               	goto	u271
  1549  0566  2D68               	goto	u270
  1550  0567                     u271:
  1551  0567  2D62               	goto	l70
  1552  0568                     u270:
  1553  0568                     l72:
  1554                           
  1555                           ;Industrial automation.c: 15:  SSPIF=0;
  1556  0568  118C               	bcf	12,3	;volatile
  1557  0569                     l73:
  1558  0569  0008               	return
  1559  056A                     __end_of_hold:
  1560                           
  1561                           	psect	text10
  1562  05A8                     __ptext10:	
  1563 ;; *************** function _I2C_Read *****************
  1564 ;; Defined at:
  1565 ;;		line 39 in file "Industrial automation.c"
  1566 ;; Parameters:    Size  Location     Type
  1567 ;;  i               2    0[COMMON] unsigned int 
  1568 ;; Auto vars:     Size  Location     Type
  1569 ;;  read1           1    3[COMMON] unsigned char 
  1570 ;; Return value:  Size  Location     Type
  1571 ;;                  1    wreg      unsigned char 
  1572 ;; Registers used:
  1573 ;;		wreg, status,2, status,0
  1574 ;; Tracked objects:
  1575 ;;		On entry : 0/0
  1576 ;;		On exit  : 0/0
  1577 ;;		Unchanged: 0/0
  1578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1579 ;;      Params:         2       0       0       0       0
  1580 ;;      Locals:         1       0       0       0       0
  1581 ;;      Temps:          1       0       0       0       0
  1582 ;;      Totals:         4       0       0       0       0
  1583 ;;Total ram usage:        4 bytes
  1584 ;; Hardware stack levels used: 1
  1585 ;; This function calls:
  1586 ;;		Nothing
  1587 ;; This function is called by:
  1588 ;;		_main
  1589 ;; This function uses a non-reentrant model
  1590 ;;
  1591                           
  1592  05A8                     _I2C_Read:	
  1593                           ;psect for function _I2C_Read
  1594                           
  1595  05A8                     l900:	
  1596                           ;incstack = 0
  1597                           ; Regs used in _I2C_Read: [wreg+status,2+status,0]
  1598                           
  1599                           
  1600                           ;Industrial automation.c: 39: unsigned char I2C_Read(unsigned int i);Industrial automati
      +                          on.c: 40: {;Industrial automation.c: 41:  unsigned char read1;;Industrial automation.c: 
      +                          42:  if(i==2)
  1601  05A8  3002               	movlw	2
  1602  05A9  0670               	xorwf	I2C_Read@i,w
  1603  05AA  0471               	iorwf	I2C_Read@i+1,w
  1604  05AB  1D03               	btfss	3,2
  1605  05AC  2DAE               	goto	u301
  1606  05AD  2DAF               	goto	u300
  1607  05AE                     u301:
  1608  05AE  2DB3               	goto	l91
  1609  05AF                     u300:
  1610  05AF                     l902:
  1611                           
  1612                           ;Industrial automation.c: 43:  {;Industrial automation.c: 44:   ACKDT=1;
  1613  05AF  1683               	bsf	3,5	;RP0=1, select bank1
  1614  05B0  1303               	bcf	3,6	;RP1=0, select bank1
  1615  05B1  1691               	bsf	17,5	;volatile
  1616                           
  1617                           ;Industrial automation.c: 45:  }
  1618  05B2  2DB6               	goto	l93
  1619  05B3                     l91:	
  1620                           ;Industrial automation.c: 46:  else
  1621                           
  1622                           
  1623                           ;Industrial automation.c: 47:  {;Industrial automation.c: 48:   ACKDT=0;
  1624  05B3  1683               	bsf	3,5	;RP0=1, select bank1
  1625  05B4  1303               	bcf	3,6	;RP1=0, select bank1
  1626  05B5  1291               	bcf	17,5	;volatile
  1627  05B6                     l93:
  1628  05B6  1C14               	btfss	20,0	;volatile
  1629  05B7  2DB9               	goto	u311
  1630  05B8  2DBA               	goto	u310
  1631  05B9                     u311:
  1632  05B9  2DB6               	goto	l93
  1633  05BA                     u310:
  1634  05BA                     l904:
  1635                           
  1636                           ;Industrial automation.c: 51:  read1=SSPBUF;
  1637  05BA  1283               	bcf	3,5	;RP0=0, select bank0
  1638  05BB  1303               	bcf	3,6	;RP1=0, select bank0
  1639  05BC  0813               	movf	19,w	;volatile
  1640  05BD  00F2               	movwf	??_I2C_Read
  1641  05BE  0872               	movf	??_I2C_Read,w
  1642  05BF  00F3               	movwf	I2C_Read@read1
  1643  05C0                     l906:
  1644                           
  1645                           ;Industrial automation.c: 52:  SSPOV=0;
  1646  05C0  1314               	bcf	20,6	;volatile
  1647  05C1                     l908:
  1648                           
  1649                           ;Industrial automation.c: 53:  ACKEN=1;
  1650  05C1  1683               	bsf	3,5	;RP0=1, select bank1
  1651  05C2  1303               	bcf	3,6	;RP1=0, select bank1
  1652  05C3  1611               	bsf	17,4	;volatile
  1653  05C4                     l910:
  1654                           
  1655                           ;Industrial automation.c: 54:  BF=0;
  1656  05C4  1014               	bcf	20,0	;volatile
  1657                           
  1658                           ;Industrial automation.c: 55:  return read1;
  1659  05C5  0873               	movf	I2C_Read@read1,w
  1660  05C6                     l96:
  1661  05C6  0008               	return
  1662  05C7                     __end_of_I2C_Read:
  1663  007E                     btemp	set	126	;btemp
  1664  007E                     wtemp0	set	126
  1665                           
  1666                           	psect	idloc
  1667                           
  1668                           ;Config register IDLOC0 @ 0x2000
  1669                           ;	unspecified, using default values
  1670  2000                     	org	8192
  1671  2000  3FFF               	dw	16383
  1672                           
  1673                           ;Config register IDLOC1 @ 0x2001
  1674                           ;	unspecified, using default values
  1675  2001                     	org	8193
  1676  2001  3FFF               	dw	16383
  1677                           
  1678                           ;Config register IDLOC2 @ 0x2002
  1679                           ;	unspecified, using default values
  1680  2002                     	org	8194
  1681  2002  3FFF               	dw	16383
  1682                           
  1683                           ;Config register IDLOC3 @ 0x2003
  1684                           ;	unspecified, using default values
  1685  2003                     	org	8195
  1686  2003  3FFF               	dw	16383
  1687                           
  1688                           	psect	config
  1689                           
  1690                           ;Config register CONFIG1 @ 0x2007
  1691                           ;	unspecified, using default values
  1692                           ;	Oscillator Selection bits
  1693                           ;	FOSC = 0x7, unprogrammed default
  1694                           ;	Watchdog Timer Enable bit
  1695                           ;	WDTE = 0x1, unprogrammed default
  1696                           ;	Power-up Timer Enable bit
  1697                           ;	PWRTE = 0x1, unprogrammed default
  1698                           ;	RE3/MCLR pin function select bit
  1699                           ;	MCLRE = 0x1, unprogrammed default
  1700                           ;	Code Protection bit
  1701                           ;	CP = 0x1, unprogrammed default
  1702                           ;	Data Code Protection bit
  1703                           ;	CPD = 0x1, unprogrammed default
  1704                           ;	Brown Out Reset Selection bits
  1705                           ;	BOREN = 0x3, unprogrammed default
  1706                           ;	Internal External Switchover bit
  1707                           ;	IESO = 0x1, unprogrammed default
  1708                           ;	Fail-Safe Clock Monitor Enabled bit
  1709                           ;	FCMEN = 0x1, unprogrammed default
  1710                           ;	Low Voltage Programming Enable bit
  1711                           ;	LVP = 0x1, unprogrammed default
  1712                           ;	In-Circuit Debugger Mode bit
  1713                           ;	DEBUG = 0x1, unprogrammed default
  1714  2007                     	org	8199
  1715  2007  3FFF               	dw	16383
  1716                           
  1717                           ;Config register CONFIG2 @ 0x2008
  1718                           ;	unspecified, using default values
  1719                           ;	Brown-out Reset Selection bit
  1720                           ;	BOR4V = 0x1, unprogrammed default
  1721                           ;	Flash Program Memory Self Write Enable bits
  1722                           ;	WRT = 0x3, unprogrammed default
  1723  2008                     	org	8200
  1724  2008  3FFF               	dw	16383

Data Sizes:
    Strings     7
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      12
    BANK0            80     10      10
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    conversion@disp	PTR unsigned char  size(1) Largest target is 6
		 -> main@read(BANK0[6]), 

    string@p	PTR unsigned char  size(1) Largest target is 7
		 -> STR_1(CODE[7]), 


Critical Paths under _main in COMMON

    _main->_conversion
    _conversion->_string
    _string->_lcd_cmd
    _lcd_cmd->_delay

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   10376
                                              0 BANK0     10    10      0
                           _I2C_Read
                        _I2C_Restart
                          _I2C_Slave
                          _I2C_Start
                           _I2C_Stop
                         _conversion
                              _delay
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _conversion                                           3     3      0    6631
                                              9 COMMON     3     3      0
                            _lcd_cmd
                             _string
 ---------------------------------------------------------------------------------
 (2) _string                                               2     2      0    3206
                                              7 COMMON     2     2      0
                            _lcd_cmd
 ---------------------------------------------------------------------------------
 (1) _lcd_cmd                                              5     0      5    3128
                                              2 COMMON     5     0      5
                              _delay
 ---------------------------------------------------------------------------------
 (2) _delay                                                2     0      2     326
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _I2C_Stop                                             0     0      0       0
                               _hold
 ---------------------------------------------------------------------------------
 (1) _I2C_Start                                            0     0      0       0
                               _hold
 ---------------------------------------------------------------------------------
 (1) _I2C_Slave                                            1     1      0      22
                                              0 COMMON     1     1      0
                               _hold
 ---------------------------------------------------------------------------------
 (1) _I2C_Restart                                          0     0      0       0
                               _hold
 ---------------------------------------------------------------------------------
 (2) _hold                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Read                                             4     2      2     121
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Read
   _I2C_Restart
     _hold
   _I2C_Slave
     _hold
   _I2C_Start
     _hold
   _I2C_Stop
     _hold
   _conversion
     _lcd_cmd
       _delay
     _string
       _lcd_cmd
   _delay
   _lcd_cmd

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      C       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      A       A       5       12.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Mon Jul 04 07:35:56 2022

                      pc 0002                       _BF 04A0                       l70 0562  
                     l72 0568                       l64 0593                       l73 0569  
                     l82 059C                       l91 05B3                       l67 061C  
                     l76 057B                       l93 05B6                       l85 05A7  
                     l79 0584                       l96 05C6                       l88 0572  
                     fsr 0004                      l102 05EF                      l114 06B8  
                    l107 07FB                      l900 05A8                      l910 05C4  
                    l902 05AF                      l904 05BA                      l920 0728  
                    l906 05C0                      l930 07C2                      l922 073E  
                    l914 06F5                      l908 05C1                      l860 05F0  
                    l940 07E8                      l932 07CC                      l924 0780  
                    l916 0704                      l870 0613                      l862 0604  
                    l942 07F0                      l934 07D4                      l926 0790  
                    l918 070A                      l950 0624                      l872 0562  
                    l856 0585                      l864 0606                      l880 05E3  
                    l944 07F7                      l936 07DB                      l928 07AD  
                    l960 0662                      l952 063B                      l890 0595  
                    l882 0573                      l858 0585                      l866 0607  
                    l874 05C8                      l938 07DF                      l970 067F  
                    l962 0668                      l954 063E                      l946 061D  
                    l892 0598                      l884 0576                      l868 0610  
                    l876 05C9                      l980 06A4                      l972 0685  
                    l964 066D                      l956 0642                      l948 0621  
                    l894 05A2                      l886 057C                      l878 05DF  
                    l990 06BB                      l982 06AA                      l974 068B  
                    l966 0673                      l958 0651                      l896 056A  
                    l888 057F                      l992 06D2                      l984 06B5  
                    l968 0679                      l976 0699                      l898 056D  
                    l994 06D6                      l978 069E                      l996 06DC  
                    l998 06E1                      _RA1 0029                      _RE0 0048  
                    _RE1 0049                      _RE2 004A                      _RC6 003E  
                    _RC7 003F                      u300 05AF                      u220 0593  
                    u301 05AE                      u221 0592                      u310 05BA  
                    u230 05F7                      u311 05B9                      u231 05F3  
                    u400 07F7                      u401 07F6                      u250 0601  
                    u410 0668                      u251 05FD                      u411 0667  
                    u244 05FA                      u420 06DC                      u325 0718  
                    u421 06DB                      u270 0568                      u350 07CC  
                    u271 0567                      u351 07CB                      u335 075B  
                    u264 0604                      u280 05EF                      u360 07D4  
                    _PEN 048A                      u281 05EE                      u361 07D3  
                    u345 079D                      u290 05A2                      u370 07DB  
                    u291 05A1                      u371 07DA                      u380 07E8  
                    u381 07E7                      u390 07F0                      u391 07EF  
                    _SEN 0488                      _SMP 04A7                      fsr0 0004  
                    indf 0000                     l1000 06E7                     STR_1 0009  
                   _RCEN 048B                     _RSEN 0489                     _main 061D  
                   _hold 0562         __end_of_I2C_Read 05C7                     btemp 007E  
       __end_of_I2C_Stop 0585                     start 0000                    ?_main 0070  
                  ?_hold 0070                    _ACKEN 048C                    _ACKDT 048D  
                  _ANSEL 0188                    _PORTA 0005                    _PORTC 0007  
                  _PORTD 0008                    _PORTE 0009                    _TRISA 0085  
                  _TRISC 0087                    _TRISD 0088                    _TRISE 0089  
                  _SSPIF 0063                    _SSPOV 00A6          __end_of_lcd_cmd 061D  
                  _delay 0585                    main@i 0029        __end_of_I2C_Slave 05A8  
      __end_of_I2C_Start 057C                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 06F4  
           __end_of_hold 056A                   ??_main 0020                   ??_hold 0070  
              I2C_Read@i 0070                   ?_delay 0070                   _ANSELH 0189  
                 _SSPBUF 0013                   _SSPCON 0014                ??_lcd_cmd 0077  
                 _string 05C7                ?_I2C_Read 0070                ?_I2C_Stop 0070  
__end_of__initialization 07FC           __pcstackCOMMON 0070            __end_of_delay 0594  
             ??_I2C_Read 0072               ??_I2C_Stop 0070                  ??_delay 0072  
             __pmaintext 061D                  _ACKSTAT 048E                  ?_string 0070  
          ??_I2C_Restart 0070               __stringtab 0003               _conversion 06F4  
              _I2C_Slave 0594                _I2C_Start 0573                  __ptext1 06F4  
                __ptext2 05C7                  __ptext3 05F0                  __ptext4 0585  
                __ptext5 057C                  __ptext6 0573                  __ptext7 0594  
                __ptext8 056A                  __ptext9 0562                  _lcd_cmd 05F0  
                delay@ms 0070      __end_of_I2C_Restart 0573     end_of_initialization 07FC  
             ?_I2C_Slave 0070               ?_I2C_Start 0070                  string@p 0078  
            ?_conversion 0070              _I2C_Restart 056A           __end_of_string 05F0  
    start_initialization 07FC              ??_I2C_Slave 0070              ??_I2C_Start 0070  
               ??_string 0077                ___latbits 0002            __pcstackBANK0 0020  
          I2C_Read@read1 0073                __pstrings 0003                 ?_lcd_cmd 0072  
               _I2C_Read 05A8                 _I2C_Stop 057C            I2C_Slave@data 0070  
            __stringbase 0008             ??_conversion 0079       __end_of__stringtab 0009  
           ?_I2C_Restart 0070       __end_of_conversion 07FC                 __ptext10 05A8  
               lcd_cmd@a 0072                 lcd_cmd@b 0074                 lcd_cmd@c 0076  
               main@read 0023           conversion@disp 007B                stringcode 0003  
               stringdir 0003                 stringtab 0003  
